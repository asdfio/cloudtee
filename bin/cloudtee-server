#!env python

import struct

import eventlet
from eventlet.green import socket
import pymongo

PORT = 8080


def mongo_connect():
    return pymongo.Connection().cloudtee.lines


class Topic(object):
    def __init__(self, name):
        self.name = name
        self.raw = []
        self.ws = []

    def subscribe_raw(self, client):
        print 'subscribe_raw(%s) %s' % (self.name, client)
        self.raw.append(client)

        scrollback = self.get_scrollback()
        for line in scrollback:
            client.write(line)
        client.flush()

    def subscribe_ws(self, client):
        print 'subscribe_ws(%s) %s' % (self.name, client)
        self.ws.append(client)

        scrollback = self.get_scrollback()
        for line in scrollback:
            self.write_ws_frame(client, line)
        client.flush()

    def write_ws_frame(self, client, msg):
        # STOLEN FROM TORNADO
        finbit = 0x80
        opcode = 0x1
        frame = struct.pack("B", finbit | opcode)
        l = len(msg)
        if l < 126:
            frame += struct.pack("B", l)
        elif l <= 0xFFFF:
            frame += struct.pack("!BH", 126, l)
        else:
            frame += struct.pack("!BQ", 127, l)
        frame += msg.encode('ascii')
        client.write(frame)

    def send(self, msg):
        dest = self.ws + self.raw
        print 'send(%s) %s to %s clients' % (self.name, msg[:-1], len(dest))
        for c in dest:
            try:
                if c in self.ws:
                    self.write_ws_frame(c, msg)
                else:
                    c.write(msg)
                c.flush()
            except socket.error, e:
                if e[0] != 32:  # broken pipe
                    raise
                print 'remove(%s) %s' % (self.name, c)
                if c in self.ws:
                    self.ws.remove(c)
                else:
                    self.raw.remove(c)

    def get_scrollback(self):
        db = mongo_connect()
        lines = db.find({'topic': self.name})
        return [line['payload'] for line in lines]


topics = {}


def challenge_response(key):
    magic = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11"
    from hashlib import sha1
    from base64 import b64encode
    return b64encode(sha1(key + magic).digest())


def accept_ws(key):
    return ("HTTP/1.1 101 Switching Protocols\r\n"
            "Upgrade: websocket\r\n"
            "Connection: Upgrade\r\n"
            "Sec-WebSocket-Accept: %s\r\n"
            "Sec-WebSocket-Protocol: binary\r\n\r\n" % challenge_response(key))


def myhandle(client, client_addr):
    print "client connected", client_addr

    reader = new_sock.makefile('r')
    writer = client.makefile('w')
    line = reader.readline()
    name = line.split(' ')[1].strip()

    if line.startswith('GET /'):
        name = name[1:]
        if not name in topics:
            topics[name] = Topic(name)
        topic = topics[name]
        key = None
        while line != "\r\n":
            if line.startswith('Sec-WebSocket-Key'):
                key = line.split(' ')[1].strip()
            line = reader.readline()

        if key:
            writer.write(accept_ws(key))
            writer.flush()
            topic.subscribe_ws(writer)
        else:
            topic.subscribe_raw(writer)

    else:
        if not name in topics:
            topics[name] = Topic(name)
        topic = topics[name]

        line = reader.readline()
        while line:
            mongo_connect().insert({'topic': name, 'payload': line})
            topic.send(line)
            line = reader.readline()
        client.close()


server = eventlet.listen(('0.0.0.0', PORT))
pool = eventlet.GreenPool(10000)
while True:
    new_sock, address = server.accept()
    pool.spawn_n(myhandle, new_sock, address)
